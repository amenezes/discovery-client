"""Test Consul standard client module."""

import unittest

from discovery.check import Check, alias
from discovery.client import Consul
from discovery.exceptions import ServiceNotFoundException
from discovery.service import Service as Svc
from discovery.utils import select_one_random


class TestClient(unittest.TestCase):
    """Unit tests to Consul standard client."""

    def setUp(self):
        """Mock of responses generated by python-consul.

        and expected results generated by discovery-client.
        """
        self.dc = Consul(
            service=Svc(
                name='myapp',
                port=5000,
                check=Check(
                    alias('consul'),
                    name='myapp-check'
                )
            )
        )

    def test_default_timeout(self):
        """Test default timeout used to check periodically health status of the Consul connection."""
        self.assertEqual(self.dc.timeout, 30)

    def test_changing_default_timeout(self):
        """Test change the time used to check periodically health status of the Consul connection."""
        dc = Consul(timeout='5')
        self.assertEqual(dc.timeout, 5)

    def test_find_services(self):
        """Test for localization of a set of services present in the consul's catalog.

        Return a list of instances present in the consul's catalog.
        """
        response = self.dc.find_services('consul')
        self.assertTrue(response.ok)

    def test_find_service_rr(self):
        """Test for localization of a service present in the consul's catalog.

        Return instances in round robin method, when there is more than
        one registered.
        """
        response = self.dc.find_service('consul')
        self.assertIsInstance(response, dict)

    def test_find_service_random(self):
        """Test for localization of a service present in the consul's catalog.

        Return random instances, when there is more than one registered.
        """
        response = self.dc.find_service('consul', select_one_random)
        self.assertIsInstance(response, dict)

    def test_service_not_found_exception(self):
        """Test for localization of a service not present in the consul's catalog.

        Raise IndexError execption.
        """
        with self.assertRaises(ServiceNotFoundException):
            self.dc.find_service('myapp')

    def test_leader_current_id(self):
        leader_id = self.dc.leader_current_id()
        self.assertIsNotNone(leader_id)
        self.assertIsInstance(leader_id, str)

    @unittest.skip
    def test_register(self):
        """Test registration of a service in the  consul's catalog."""
        self.dc.register()
        response = self.dc.catalog.service('myapp')
        self.assertTrue(response.ok)
        self.assertIsInstance(response.json(), dict)

    # def test_register_connection_error(self):
    #     """Failure test to register a service when there is no instance of consul available."""
    #     self.consul_client.agent.service.register = MagicMock(
    #         side_effect=requests.exceptions.ConnectionError
    #     )
    #     self.consul_client.health.service = MagicMock(
    #         side_effect=requests.exceptions.ConnectionError
    #     )

    #     with self.assertLogs() as cm:
    #         logging.getLogger(self.dc.register())
    #     self.assertEqual(
    #         cm.output, ['ERROR:root:Failed to connect to discovery...']
    #     )

    # def test_deregister(self):
    #     """Test the deregistration of a service present in the consul's catalog."""
    #     self.dc.register()
    #     myapp_service = self.dc.find_service('myapp')

    #     self.assertIsInstance(myapp_service, service.Service)
    #     self.assertIn(myapp_service.raw, self.fmt_response)

    #     self.dc.deregister()

    #     self.consul_client.catalog.service = MagicMock(return_value=(0, []))

    #     with self.assertRaises(IndexError):
    #         myapp_service = self.dc.find_service('myapp')

    # def test_register_additional_check(self):
    #     """Test the registration of an additional check for a service registered."""
    #     self.dc.register_additional_check(
    #         check.Check(
    #             name='additional-check',
    #             check=check.alias('consul')
    #         )
    #     )

    # def test_register_additional_check_failed(self):
    #     with self.assertRaises(TypeError):
    #         self.dc.register_additional_check('invalid-check')
