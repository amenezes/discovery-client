"""Test Consul async client module."""

import asyncio
import unittest

from discovery import aioclient
from discovery.exceptions import ServiceNotFoundException
from discovery.utils import select_one_random


class TestAioClient(unittest.TestCase):
    """Unit tests to async Consul client."""

    def setUp(self):
        """Mock of responses generated by python-consul.

        and expected results generated by discovery-client.
        """
        self.dc = aioclient.Consul()
        self.loop = asyncio.get_event_loop()

    def test_default_timeout(self):
        """Test the default timeout used to check periodically health status of the Consul connection."""
        self.assertEqual(self.dc.timeout, 30)

    def test_changing_default_timeout(self):
        """Test change the time used to check periodically health status of the Consul connection."""
        dc = aioclient.Consul(timeout='5')
        self.assertEqual(dc.timeout, 5)

    def test_find_services(self):
        """Test for localization of a set of services present in the consul's catalog.

        Return a list of instances present in the consul's catalog.
        """
        response = self.loop.run_until_complete(self.dc.find_services('consul'))
        self.assertEqual(response.status, 200)

    def test_find_service_rr(self):
        """Test for localization of a service present in the consul's catalog.

        Return instances in round robin method, when there is more than
        one registered.
        """
        response = self.loop.run_until_complete(self.dc.find_service('consul'))
        self.assertIsInstance(response, dict)

    def test_find_service_random(self):
        """Test for localization of a service present in the consul's catalog.

        Return random instances, when there is more than one registered.
        """
        response = self.loop.run_until_complete(
            self.dc.find_service('consul', select_one_random)
        )
        self.assertIsInstance(response, dict)

    def test_service_not_found_exception(self):
        """Test for localization of a service not present in the consul's catalog.

        Raise IndexError execption.
        """
        with self.assertRaises(ServiceNotFoundException):
            self.loop.run_until_complete(self.dc.find_service('myapp'))

    def test_get_leader_ip(self):
        leader_ip = self.loop.run_until_complete(
            self.dc.get_leader_ip()
        )
        self.assertIsNotNone(leader_ip)
        self.assertIsInstance(leader_ip, str)

    def test_get_consul_health(self):
        consul_health = self.loop.run_until_complete(
            self.dc.get_consul_health()
        )
        self.assertIsNotNone(consul_health)
        self.assertIsInstance(consul_health, list)

    def test_leader_current_id(self):
        leader_id = self.loop.run_until_complete(
            self.dc.leader_current_id()
        )
        self.assertIsNotNone(leader_id)
        self.assertIsInstance(leader_id, str)

    # async def test_register(self):
    #     """Test registration of a service in the  consul's catalog."""
    #     await self.dc.register()
    #     myapp_service = await self.dc.find_service('myapp')

    #     self.assertIsInstance(myapp_service, service.Service)
    #     self.assertIn(myapp_service.raw, self.fmt_response)

    # async def test_deregister(self):
    #     """Test the deregistration of a service present in the consul's catalog."""
    #     await self.dc.register()
    #     await self.dc.deregister()

    #     self.consul_client.catalog.service = CoroutineMock(
    #         return_value=(0, [])
    #     )

    #     with self.assertRaises(IndexError):
    #         await self.dc.find_service('myapp')

    # async def test_register_additional_check(self):
    #     """Test the registration of an additional check for a service registered."""
    #     await self.dc.register_additional_check(
    #         check.Check(
    #             name='additional-check',
    #             check=check.alias('consul')
    #         )
    #     )

    # async def test_register_additional_check_failed(self):
    #     with self.assertRaises(TypeError):
    #         await self.dc.register_additional_check('invalid-check')

    # async def test_deregister_additional_check(self):
    #     """Test the registration of an additional check for a service registered."""
    #     await self.dc.deregister_additional_check(
    #         check.Check(
    #             name='additional-check',
    #             check=check.alias('consul')
    #         )
    #     )

    # async def test_deregister_additional_check_failed(self):
    #     with self.assertRaises(TypeError):
    #         await self.dc.deregister_additional_check('invalid-check')
